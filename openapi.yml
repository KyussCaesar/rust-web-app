openapi: 3.0.0
info:
  version: 0.0.0
  description: |
    Rust Web App
  title: Rust Web App
tags:
  - name: user
    description: CRUD Users.
  - name: monitoring
    description: Monitoring
paths:
  /healthcheck:
    get:
      tags: [monitoring]
      operationId: healthcheckGet
      description: |
        Return 200 OK if the application is up.
      responses:
        '200':
          description: OK
  /metrics:
    get:
      tags: [monitoring]
      operationId: metricsGet
      description: |
        Return Prometheus metrics.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /user:
    put:
      tags: [user]
      operationId: userPut
      summary: Upsert user
      description: |
        Upsert user information.
        If `user.id` is absent from the payload, creates a new user. Otherwise, update existing user information.

        Return:
        - 201: user was created
        - 200: user was updated successfully
        - 400: missing some information required to create user
        - 404: user ID in request does not refer to a known user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IUserDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUserDTO'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUserDTO'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    get:
      tags: [user]
      summary: Get user
      description: |
        Return user information by ID.
      operationId: userGet
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: the ID of the user to get.
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUserDTO'
        '404':
          description: Not Found
    delete:
      tags: [user]
      summary: Delete user
      description: |
        Delete user information by ID.
      operationId: userDelete
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: The ID of the user to delete.
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUserDTO'

components:
  schemas:
    IUserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: |
            User ID
        username:
          type: string
          description: |
            Username (required for creation).
        email:
          type: string
          format: email
          description: |
            User email address (required for creation).
        createdAt:
          type: string
          format: date-time
          description: DB-managed, ignored during create/update.
        updatedAt:
          type: string
          format: date-time
          description: DB-managed, ignored during create/update.
        deletedAt:
          type: string
          format: date-time
          description: DB-managed, ignored during create/update.
